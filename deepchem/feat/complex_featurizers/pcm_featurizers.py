import logging
import os
import time
from typing import Any, Dict, List, Union

import numpy as np

from deepchem.feat.base_classes import ComplexFeaturizer

TARGET_FEATRES_PATH = (
    "/data/dbs/training/version_230209/descriptors/targets/protnlm.npz"
)
LIGAND_FEATRES_PATH = (
    "/data/dbs/training/version_230209/descriptors/small_mols/gost_kkb_bdb"
)


class ProteinLigandDescriptors:
    def __init__(self, protein_descriptors, ligand_descriptors):
        self.protein_descriptors = protein_descriptors
        self.ligand_descriptors = ligand_descriptors


class PCMFeaturizer(ComplexFeaturizer):
    def __init__(
        self,
        ligand_features_types,
        target_features_types,
        ligand_features_path=LIGAND_FEATRES_PATH,
        target_features_path=TARGET_FEATRES_PATH,
        load_ligand_features_from_disk=True,
        kwargs: Dict[str, Any] = None,
    ):
        super().__init__()
        logging.info(
            "Initializing PCMFeaturizer (loading pre-featurized mols & targets from disk)"
        )
        self.target_features_types = target_features_types
        print(target_features_path)
        if os.path.exists(target_features_path):
            featurized_target_data = np.load(target_features_path, allow_pickle=True)
            self.target_x = featurized_target_data["descriptors"]
            uniprot_ids = featurized_target_data["uniprot_ids"]
            self.target_ids = dict(zip(uniprot_ids, np.arange(uniprot_ids.shape[0])))
            logging.info("target data has been processed")
        else:
            raise ValueError(
                f"Unable to locate target feautres at provided path {target_features_path}"
            )

        if load_ligand_features_from_disk:
            logging.info(f"Loading pre-featurized mols from {ligand_features_path}")
            st_time = time.time()
            lig_X_path = os.path.join(ligand_features_path, "shard-0-X.npz")
            lig_ids_path = os.path.join(ligand_features_path, "shard-0-ids.npz")
            if not os.path.exists(lig_X_path) or not os.path.exists(lig_ids_path):
                raise ValueError(
                    "The path must contain one features file named `shard-0-X.npz` and `shard-0-ids.npz`"
                    "that are generated by DeepChem Diskdataset Loader or manually"
                )

            self.lig_x = {}

            lig_x_array = np.load(lig_X_path, allow_pickle=True)["arr_0"]
            lig_ids_array = np.load(lig_ids_path, allow_pickle=True)["arr_0"]

            if len(lig_x_array) != len(lig_ids_array):
                raise ValueError(
                    "The length of the ligand features array and ids must be the same"
                )

            if len(lig_x_array) == 0:
                raise ValueError(
                    "The length of the ligand features array must be larger than 0"
                )

            # assume the lig_ids_array is a 2D array where the first column is an integer ID of the ligand,
            # the second column is the inchi_key of the ligand, the third column is the smiles of the ligand
            lig_ids_array = (
                lig_ids_array[:, 1] if len(lig_ids_array.shape) == 2 else lig_ids_array
            )
            for lig_id, lig_x in zip(lig_ids_array, lig_x_array):
                # here we use ligand_features_types to select the specific ligand features we would like
                # to use from the lig_x_array. Similar to the logic we have here:
                # https://bitbucket.org/1859/deepchem/src/88553e3f6ba467a52d929972ed2f821cdeddae5f/deepchem/feat/molecule_featurizers/meta_descriptors.py#lines-164
                # I am doing this so that we don't change the old GNN implementation
                # You may ask why
                # TODO
                # self.lig_x[lig_id] = sample_features(lig_x, ligand_features_types)
                self.lig_x[lig_id] = lig_x
            logging.info(
                f"Loading pre-featurized mols took {time.time() - st_time} seconds"
            )

    def _featurize(self, complex) -> List:
        p_idx, l_id_or_graph = complex
        if isinstance(l_id_or_graph, (int, str)):
            pl_graph = self.lig_x[l_id_or_graph]
        else:
            pl_graph = l_id_or_graph
        pl_graph.target_global_features = self.target_x[self.target_ids[p_idx]]
        return pl_graph
